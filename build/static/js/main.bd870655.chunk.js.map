{"version":3,"sources":["SqlConvert.js","util/MatchUtil.js","SqlToMd.js","App.js","reportWebVitals.js","index.js"],"names":["TextArea","SqlConvert","doParseText","sql","param","sqlData","split","state","splitChar","forEach","e","leftIndex","indexOf","leftKh","splitResult","substr","lastIndexOf","stringChar","replace","placeholder","setState","resultText","doSqlChange","peddingText","doParamChange","paramText","leftWidth","centerWidth","rightWidth","peddingRow","paramRow","resultRow","justify","style","width","this","type","fontWeight","maxLength","resize","showCount","rows","onChange","target","value","align","height","onClick","overflow","Component","strMatchFirst","str","matchPattern","result","match","strAnyMatchFirst","matchPatterns","strData","strValueFirstXfh","strCommentDescFirst","strCommentDescFirstDyh","symbol","desc","String","SqlToMd","regex_creat_table","regex_creat_table_finish","regex_table_comment","regex_field_comment","regex_field_name","regex_dyh","regex_char","regex_not_null","regex_primary_key","regex_index_key","RegExp","crlf","tableEnglishName","tabelChineseDesc","sqlStart","sqlEnd","rowNum","mdAllText","pkIndexKeyJoin","rowJoinResult","test","indexDesc","indexKeyName","indexKeys","strIndexKeys","fieldType","trim","fieldKey","fieldDesc","isNotNull","createSql","TabPane","App","tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd870655.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Input, Button, Row, Col } from 'antd';\r\nimport './App.css'\r\nconst { TextArea } = Input;\r\n\r\nclass SqlConvert extends Component {\r\n\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            leftWidth: '45%',\r\n            centerWidth: '10%',\r\n            rightWidth: '45%',\r\n            peddingRow: 15,\r\n            paramRow: 7,\r\n            resultRow: 25,\r\n            peddingText: \"\",\r\n            paramText: \"\",\r\n            resultText: \"\",\r\n            // 分隔符\r\n            splitChar: \", \",\r\n            // 占位符\r\n            placeholder: \"?\",\r\n            //需要添加双引号的数据类型\r\n            stringChar: \"(String)\",\r\n            // 左括号\r\n            leftKh: \"(\"\r\n        }\r\n    }\r\n\r\n    doParseText = (sql, param) => {\r\n\r\n        let paramData = param + \"\"\r\n        let sqlData = sql + \"\"\r\n        \r\n        paramData.split(this.state.splitChar).forEach(e => {\r\n            // 转换目标数据\r\n            let leftIndex = e.indexOf(this.state.leftKh)\r\n            let splitResult = e.substr(0, leftIndex)\r\n            let lastStrIndex = e.lastIndexOf(this.state.stringChar)\r\n            if (lastStrIndex >= 0) {\r\n                splitResult = \"\\\"\" + splitResult + \"\\\"\"\r\n            }\r\n            // 替换值\r\n            sqlData = sqlData.replace(this.state.placeholder, splitResult)\r\n        });\r\n        this.setState({ resultText: sqlData })\r\n    }\r\n\r\n    doSqlChange = (sql) => {\r\n        this.setState({ peddingText: sql })\r\n    }\r\n\r\n    doParamChange = (param) => {\r\n        this.setState({ paramText: param })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* 一行三列 */}\r\n                <Row justify=\"center\">\r\n                    <Col style={{ width: this.state.leftWidth }}>\r\n                        <Row >\r\n                            <Button type=\"text\" style={{ width: '80%', fontWeight: \"bold\" }}>SQL</Button>\r\n                        </Row>\r\n                        <Row>\r\n                            <TextArea\r\n                                maxLength={5000}\r\n                                style={{ width: '100%', resize: 'none' }}\r\n                                placeholder=\"带有占位符的SQL\"\r\n                                showCount\r\n                                rows={this.state.peddingRow}\r\n                                onChange={e => this.doSqlChange(e.target.value)}\r\n                            />\r\n                        </Row>\r\n                        <Row>\r\n                            <Button\r\n                                type=\"text\"\r\n                                style={{ width: '80%', fontWeight: \"bold\" }}\r\n                            >参数</Button>\r\n                        </Row>\r\n                        <Row>\r\n                            <TextArea\r\n                                maxLength={5000}\r\n                                style={{ width: '100%', resize: 'none' }}\r\n                                placeholder=\"SQL参数\"\r\n                                showCount\r\n                                rows={this.state.paramRow}\r\n                                onChange={e => this.doParamChange(e.target.value)}\r\n                            />\r\n                        </Row>\r\n                    </Col>\r\n                    <Col style={{ width: this.state.centerWidth }}>\r\n                        <Row align=\"middle\" justify=\"center\" style={{ height: \"100%\" }}>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                style={{ width: '85%', fontWeight: \"bold\" }}\r\n                                onClick={() => this.doParseText(this.state.peddingText, this.state.paramText)}\r\n                            >&gt;&gt; 转换 &gt;&gt;</Button>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col style={{ width: this.state.rightWidth }}>\r\n                        <Row align=\"middle\" justify=\"center\" style={{ height: \"30px\" }}>\r\n                            <Button type=\"text\" style={{ fontWeight: \"bold\" }}>结果</Button>\r\n                        </Row>\r\n                        <Row style={{ height: \"100%\" }}>\r\n                            <TextArea\r\n                                value={this.state.resultText}\r\n                                maxLength={5000}\r\n                                style={{ width: '100%', overflow: 'auto', resize: 'none' }}\r\n                                placeholder=\"转换结果\"\r\n                                align='center'\r\n                                rows={this.state.resultRow}\r\n                                showCount\r\n                            />\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SqlConvert;","// STRING 匹配到第一个数据\r\nexport function strMatchFirst(str, matchPattern) {\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    if (matchPattern == null) {\r\n        return str;\r\n    }\r\n    let strData = str + \"\"\r\n    let result = strData.match(matchPattern)\r\n    if (result != null) {\r\n        return result[0];\r\n    }\r\n    return null;\r\n}\r\n\r\n// STRING 匹配到第二个数据\r\nfunction strMatchSecond(str, matchPattern) {\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    if (matchPattern == null) {\r\n        return str;\r\n    }\r\n    let result = String(str).match(matchPattern)\r\n    if (result != null && result.length > 1) {\r\n        return result[1];\r\n    }\r\n    return null;\r\n}\r\n\r\n// KEY `IND_rela_tena_id` (`rela_tena_id`) USING BTREE COMMENT '租户id索引' -> rela_tena_id\r\nexport function strIndexKeys(str) {\r\n\r\n    const regex_index_key = /\\(`.*`\\)/g\r\n    let result = strMatchFirst(str, regex_index_key)\r\n    let symbol_start = \"(`\"\r\n    let symbol_end = \"`)\"\r\n    if (result != null) {\r\n        return result.substr(result.indexOf(symbol_start) + 2, result.lastIndexOf(symbol_end) - 2)\r\n    }\r\n    return null\r\n}\r\n\r\n// 根据正则模型逐个匹配，返回第一个匹配值\r\nexport function strAnyMatchFirst(str, matchPatterns) {\r\n\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    if (matchPatterns == null) {\r\n        return str;\r\n    }\r\n    let strData = str + \"\"\r\n    matchPatterns.forEach(e => {\r\n        strData = strMatchFirst(strData, e)\r\n    });\r\n    return strData;\r\n}\r\n\r\n// 小分号的内容 `abc` -> abc\r\nexport function strValueFirstXfh(str) {\r\n    const regex_field_name = /`\\w+`/g\r\n    return strCommentDescFirst(str, [regex_field_name], \"`\")\r\n}\r\n\r\n// 获取 COMMENT 'abc' --> abc\r\nexport function strCommentDescFirstDyh(str, matchPatterns) {\r\n    return strCommentDescFirst(str, matchPatterns, \"'\")\r\n}\r\n\r\n// 获取 COMMENT 'abd' -> abd\r\nfunction strCommentDescFirst(str, matchPatterns, symbol) {\r\n\r\n    if (str == null || matchPatterns == null) {\r\n        return null;\r\n    }\r\n    let desc = String(strAnyMatchFirst(str, matchPatterns))\r\n    if (desc != null && symbol != null) {\r\n        return desc.substr(desc.indexOf(symbol) + 1, desc.lastIndexOf(symbol) - 1)\r\n    }\r\n    return null;\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\nimport { Input, Button, Row, Col } from 'antd';\r\nimport { strIndexKeys, strAnyMatchFirst, strCommentDescFirstDyh, strValueFirstXfh } from './util/MatchUtil.js'\r\nimport './App.css'\r\nconst { TextArea } = Input;\r\n\r\nclass SqlToMd extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            leftWidth: '45%', centerWidth: '10%', rightWidth: '45%',\r\n            peddingRow: 30, resultRow: 30,\r\n            createSql: \"\",\r\n            resultText: \"\",\r\n        }\r\n    }\r\n\r\n    doParseText = (sql) => {\r\n\r\n        if (sql == null) {\r\n            return\r\n        }\r\n        // 建表语句开始\r\n        const regex_creat_table = /CREATE\\s+TABLE+/gi\r\n        // 建表语句结束\r\n        const regex_creat_table_finish = /ENGINE|InnoDB/gi\r\n        // 表中文描述\r\n        const regex_table_comment = /COMMENT\\s*=\\s*'.*'/gi\r\n        // 表字段描述\r\n        const regex_field_comment = /COMMENT\\s*'.*'/gi\r\n        // 字段名称\r\n        const regex_field_name = /`.*`/g\r\n        // 单引号数据\r\n        const regex_dyh = /'.*'/g\r\n        // 全字符，数字字母下划线\r\n        const regex_char = /\\w+/g\r\n        // 字段非空判断\r\n        const regex_not_null = /.*NOT\\s+NULL.*/gi\r\n        // 主键匹配\r\n        const regex_primary_key = /\\s*PRIMARY\\s+KEY.*/i\r\n        // 索引匹配\r\n        const regex_index_key = RegExp(/^\\s*KEY\\s+/i)\r\n        // 回车换行\r\n        const crlf = \"\\n\"\r\n        // md表头描述\r\n        const mdTableHeadDesc = \"|序号|名称|中文名/英文名|类型|是否为空|主/外建|备注| \\n|----|----|---------|----|----|----|----|\\n\"\r\n\r\n        // 表英文名\r\n        let tableEnglishName = \"\"\r\n        let tabelChineseDesc = \"\"\r\n        // 开始：create tabel 结束：包含\r\n        let sqlStart = false\r\n        let sqlEnd = false\r\n        // 行数\r\n        let rowNum = 0\r\n        // md文档表 描述\r\n        let mdAllText = \"\"\r\n        // 主键和索引描述\r\n        let pkIndexKeyJoin = \"\"\r\n        // 字段所有结果\r\n        let rowJoinResult = \"\"\r\n        // 遍历每行数据，解析\r\n        String(sql).split(crlf).forEach(e => {\r\n\r\n            if (e == null) {\r\n                return;\r\n            }\r\n            // 如果是 create table语句，取表名\r\n            if (regex_creat_table.test(e) == true) {\r\n                sqlStart = true;\r\n                sqlEnd = false;\r\n                tableEnglishName = strAnyMatchFirst(e, [regex_field_name, regex_char])\r\n                return;\r\n            }\r\n            // 建表语句结束,同时拼接所有数据\r\n            if (regex_creat_table_finish.test(e) == true) {\r\n                sqlEnd = true;\r\n                sqlStart = false\r\n                tabelChineseDesc = String(strCommentDescFirstDyh(e, [regex_table_comment, regex_dyh]))\r\n                let mdTableDesc = \"#### \" + tabelChineseDesc + \"(\" + tableEnglishName + \")\" + crlf + crlf;\r\n                // 所有数据\r\n                mdAllText = mdAllText + mdTableDesc + rowJoinResult + crlf + \"注：\" + crlf + pkIndexKeyJoin + crlf;\r\n                // 设置数据\r\n                this.setState({ resultText: mdAllText })\r\n                // 初始化值\r\n                pkIndexKeyJoin = \"\"; rowJoinResult = \"\"\r\n            }\r\n            // 如果字段不在 CREATE TABLE 和 ENGINE之间跳出\r\n            if (!sqlStart || sqlEnd) {\r\n                rowNum = 0;\r\n                return;\r\n            }\r\n\r\n            // 匹配索引以及主键描述，并拼接描述\r\n            if (regex_primary_key.test(e)) {\r\n                // 主键\r\n                pkIndexKeyJoin = pkIndexKeyJoin + \"主键：\" + strValueFirstXfh(e) + \";\" + crlf;\r\n            }else if (regex_index_key.test(e)) {\r\n                // 索引\r\n                let indexDesc = strCommentDescFirstDyh(e, [regex_field_comment, regex_dyh])\r\n                let indexKeyName = strValueFirstXfh(e);\r\n                let indexKeys = strIndexKeys(e)\r\n                pkIndexKeyJoin = pkIndexKeyJoin + \"索引：\" + indexDesc + \"(\" + indexKeyName + \")，字段：(\" + indexKeys + \")\" + \";\" + crlf\r\n            } else {\r\n                // 匹配字段描述\r\n                rowNum++;\r\n                if (rowNum == 1) {\r\n                    rowJoinResult = mdTableHeadDesc;\r\n                }\r\n                // 根据空格拆分，利用位置确认数据\r\n                let rowSplitData = e.trim().split(/[\\s]/);\r\n                let fieldType = rowSplitData[1];\r\n                let fieldKey = strValueFirstXfh(e);\r\n                let fieldDesc = strCommentDescFirstDyh(e, [regex_field_comment, regex_dyh])\r\n                let isNotNull = regex_not_null.test(e);\r\n                // 拼接\r\n                rowJoinResult = rowJoinResult + \"|\" + rowNum + \"|\" + fieldKey + \"|\" + fieldDesc + \"|\" + fieldType + \"|\" + (isNotNull ? \"是\" : \"否\") + \"|\" + \"|\" + \"|\" + crlf;\r\n            }\r\n        })\r\n    }\r\n\r\n    doSqlChange = (sql) => {\r\n        this.setState({ createSql: sql })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* 一行三列 */}\r\n                <Row justify=\"center\">\r\n                    <Col style={{ width: this.state.leftWidth }}>\r\n                        <Row >\r\n                            <Button type=\"text\" style={{ width: '80%', fontWeight: \"bold\" }}>数据库建表语句</Button>\r\n                        </Row>\r\n                        <Row>\r\n                            <TextArea\r\n                                style={{ width: '100%', resize: 'none' }}\r\n                                placeholder=\"数据库中的建表语句，支持多条\"\r\n                                showCount\r\n                                rows={this.state.peddingRow}\r\n                                onChange={e => this.doSqlChange(e.target.value)}\r\n                            />\r\n                        </Row>\r\n                    </Col>\r\n                    <Col style={{ width: this.state.centerWidth }}>\r\n                        <Row align=\"middle\" justify=\"center\" style={{ height: \"100%\" }}>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                style={{ width: '85%', fontWeight: \"bold\" }}\r\n                                onClick={() => this.doParseText(this.state.createSql)}\r\n                            >&gt;&gt; 转换 &gt;&gt;</Button>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col style={{ width: this.state.rightWidth }}>\r\n                        <Row align=\"middle\" justify=\"center\" style={{ height: \"30px\" }}>\r\n                            <Button type=\"text\" style={{ fontWeight: \"bold\" }}>结果</Button>\r\n                        </Row>\r\n                        <Row style={{ height: \"100%\" }}>\r\n                            <TextArea\r\n                                value={this.state.resultText}\r\n                                style={{ width: '100%', overflow: 'auto', resize: 'none' }}\r\n                                placeholder=\"转换结果\"\r\n                                align='center'\r\n                                rows={this.state.resultRow}\r\n                                showCount\r\n                            />\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SqlToMd;","import { Tabs } from 'antd';\r\nimport SqlConvert from './SqlConvert';\r\nimport SqlToMd from './SqlToMd';\r\nconst { TabPane } = Tabs;\r\n\r\nfunction App() {\r\n  return (\r\n    <Tabs type=\"card\">\r\n      <TabPane tab=\"SQL转换\" key=\"1\">\r\n        <SqlConvert />\r\n      </TabPane>\r\n      <TabPane tab=\"SQL-TO-MD\" key=\"2\">\r\n        <SqlToMd />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}